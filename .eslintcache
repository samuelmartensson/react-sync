[{"C:\\Users\\Samuel\\Desktop\\exam\\exam\\src\\index.js":"1","C:\\Users\\Samuel\\Desktop\\exam\\exam\\src\\App.js":"2","C:\\Users\\Samuel\\Desktop\\exam\\exam\\src\\reportWebVitals.js":"3","C:\\Users\\Samuel\\Desktop\\exam\\exam\\src\\components\\CreateRoomInput.jsx":"4","C:\\Users\\Samuel\\Desktop\\exam\\exam\\src\\components\\Room.jsx":"5","C:\\Users\\Samuel\\Desktop\\exam\\exam\\src\\firebase.js":"6","C:\\Users\\Samuel\\Desktop\\exam\\exam\\src\\utils\\helpers.js":"7","C:\\Users\\Samuel\\Desktop\\exam\\exam\\src\\components\\Queue.jsx":"8","C:\\Users\\Samuel\\Desktop\\exam\\exam\\src\\components\\Player.jsx":"9","C:\\Users\\Samuel\\Desktop\\exam\\exam\\src\\components\\UserList.jsx":"10","C:\\Users\\Samuel\\Desktop\\exam\\exam\\src\\utils\\genericStyles.js":"11"},{"size":653,"mtime":1612712304312,"results":"12","hashOfConfig":"13"},{"size":379,"mtime":1612706981208,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1606521402337,"results":"15","hashOfConfig":"13"},{"size":1635,"mtime":1613055510980,"results":"16","hashOfConfig":"13"},{"size":4392,"mtime":1613055543988,"results":"17","hashOfConfig":"13"},{"size":826,"mtime":1613052578614,"results":"18","hashOfConfig":"13"},{"size":489,"mtime":1612713045391,"results":"19","hashOfConfig":"13"},{"size":4843,"mtime":1612719046738,"results":"20","hashOfConfig":"13"},{"size":9415,"mtime":1612826135497,"results":"21","hashOfConfig":"13"},{"size":2860,"mtime":1612804662963,"results":"22","hashOfConfig":"13"},{"size":235,"mtime":1613055358179,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"10xn7tx",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Samuel\\Desktop\\exam\\exam\\src\\index.js",[],["49","50"],"C:\\Users\\Samuel\\Desktop\\exam\\exam\\src\\App.js",[],"C:\\Users\\Samuel\\Desktop\\exam\\exam\\src\\reportWebVitals.js",[],"C:\\Users\\Samuel\\Desktop\\exam\\exam\\src\\components\\CreateRoomInput.jsx",[],"C:\\Users\\Samuel\\Desktop\\exam\\exam\\src\\components\\Room.jsx",[],"C:\\Users\\Samuel\\Desktop\\exam\\exam\\src\\firebase.js",[],"C:\\Users\\Samuel\\Desktop\\exam\\exam\\src\\utils\\helpers.js",[],"C:\\Users\\Samuel\\Desktop\\exam\\exam\\src\\components\\Queue.jsx",[],"C:\\Users\\Samuel\\Desktop\\exam\\exam\\src\\components\\Player.jsx",["51"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport { database } from '../firebase';\r\nimport Queue from './Queue';\r\nimport UserList from './UserList';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPause, faPlay } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default function Player({ id }) {\r\n  const ref = database.ref(`/rooms/${id}`);\r\n  const [roomName, setRoomName] = useState('');\r\n  const [currentTime, setCurrentTime] = useState('');\r\n  const [indicatorTime, setIndicatorTime] = useState('');\r\n  const [playerState, setPlayerState] = useState(1);\r\n  const [isControlsHovered, setIsControlsHovered] = useState('fade');\r\n  const toolTipRef = useRef();\r\n  const indicatorRef = useRef();\r\n  const controlsRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!window.YT) {\r\n      const tag = document.createElement('script');\r\n      tag.src = 'https://www.youtube.com/iframe_api';\r\n\r\n      window.onYouTubeIframeAPIReady = loadVideo;\r\n\r\n      const firstScriptTag = document.getElementsByTagName('script')[0];\r\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n    } else {\r\n      loadVideo();\r\n    }\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    ref.once('value', (snap) => {\r\n      const name = snap.val().name;\r\n      document.title = `Synced - ${name}`;\r\n\r\n      setRoomName(name);\r\n    });\r\n  }, [ref]);\r\n\r\n  useEffect(() => {\r\n    setInterval(() => {\r\n      try {\r\n        const video = document.querySelector('#player');\r\n        let time =\r\n          (window.player.getCurrentTime() / window.player.getDuration()) *\r\n          video.clientWidth;\r\n        let hhmmss = new Date(window.player.getCurrentTime() * 1000)\r\n          .toISOString()\r\n          .substr(14, 5);\r\n        if (!isNaN(time)) {\r\n          setCurrentTime(hhmmss);\r\n          indicatorRef.current.style = `width: ${time}px; top: 50%;`;\r\n        }\r\n      } catch (err) {\r\n        console.log('Video loading...');\r\n      }\r\n    }, 1000);\r\n  }, []);\r\n\r\n  function loadVideo() {\r\n    window.player = new window.YT.Player(`player`, {\r\n      // Get video ID from database\r\n      videoId: 'Jzfpyo-q-RM',\r\n      playerVars: {\r\n        controls: 0,\r\n      },\r\n      events: {\r\n        onReady: onPlayerReady,\r\n        onStateChange: onPlayerStateChange,\r\n      },\r\n    });\r\n  }\r\n\r\n  function onPlayerStateChange(event) {\r\n    if (event.data === window.YT.PlayerState.PAUSED) {\r\n      ref.update({\r\n        state: 1,\r\n        timestamp: event.target.getCurrentTime(),\r\n      });\r\n    }\r\n    if (event.data === window.YT.PlayerState.PLAYING) {\r\n      ref.update({\r\n        state: 0,\r\n      });\r\n    }\r\n  }\r\n\r\n  function onPlayPause(player) {\r\n    database.ref(`rooms/${id}/state`).on('value', (snap) => {\r\n      const state = snap.val();\r\n      if (state === 1) {\r\n        player.pauseVideo();\r\n        setPlayerState(1);\r\n      } else if (state === 0) {\r\n        player.playVideo();\r\n        setPlayerState(0);\r\n      }\r\n    });\r\n  }\r\n  function onTimestampChange(player) {\r\n    database.ref(`rooms/${id}/timestamp`).on('value', (snap) => {\r\n      player.seekTo(snap.val());\r\n    });\r\n  }\r\n  function onVideoChange(player) {\r\n    database.ref(`rooms/${id}/videoId`).on('value', (snap) => {\r\n      player.loadVideoById(snap.val());\r\n    });\r\n  }\r\n\r\n  const onPlayerReady = (event) => {\r\n    onPlayPause(event.target);\r\n    onVideoChange(event.target);\r\n    onTimestampChange(event.target);\r\n  };\r\n  function getVideoDuration() {\r\n    try {\r\n      let total = window.player.getDuration();\r\n      return `${new Date(total * 1000).toISOString().substr(14, 5)}`;\r\n    } catch {\r\n      console.log('Video not played yet');\r\n    }\r\n  }\r\n  function pxlToSecs(pxl) {\r\n    const video = document.querySelector('#player');\r\n\r\n    let videoInSecs = window.player.getDuration();\r\n    let percentOfVideo = pxl / (video.clientWidth * 0.97); // Must be same percentage as progress-bar css-width\r\n\r\n    return videoInSecs * percentOfVideo;\r\n  }\r\n  function moveToolTipPosition(e) {\r\n    if (window.player.getDuration) {\r\n      let rect = e.target.getBoundingClientRect();\r\n      let x = e.clientX - rect.left;\r\n      let time = pxlToSecs(x);\r\n      let hhmmss = new Date(time * 1000).toISOString().substr(14, 5);\r\n      if (!isNaN(time)) {\r\n        setIndicatorTime(hhmmss);\r\n        toolTipRef.current.style = `left: ${x}px; display: block;`;\r\n      }\r\n    }\r\n  }\r\n\r\n  function playPause() {\r\n    ref.update({\r\n      state: playerState === 1 ? 0 : 1,\r\n    });\r\n  }\r\n  function seek(e) {\r\n    let rect = e.target.getBoundingClientRect();\r\n    let x = e.clientX - rect.left;\r\n\r\n    indicatorRef.current.style.width = x + 'px';\r\n\r\n    let time = pxlToSecs(x);\r\n    window.player.seekTo(time);\r\n    ref.update({\r\n      timestamp: time,\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isControlsHovered === 'fade') {\r\n      const delay = setTimeout(() => {\r\n        setIsControlsHovered(false);\r\n      }, 3000);\r\n\r\n      return () => {\r\n        clearTimeout(delay);\r\n      };\r\n    }\r\n  }, [isControlsHovered]);\r\n  return (\r\n    <MainContainer>\r\n      {/* <h1>{roomName}</h1> */}\r\n      <Flexbox>\r\n        <Wrapper>\r\n          <Iframe\r\n            onClick={playPause}\r\n            onMouseMove={() => setIsControlsHovered('fade')}\r\n          >\r\n            <div id=\"player\"></div>\r\n            <Controls\r\n              onClick={(e) => e.stopPropagation()}\r\n              style={{ opacity: isControlsHovered ? '1' : '0' }}\r\n              ref={controlsRef}\r\n            >\r\n              <ControlsInnerWrap>\r\n                <PlayPauseButton onClick={playPause}>\r\n                  {playerState ? (\r\n                    <FontAwesomeIcon icon={faPlay} />\r\n                  ) : (\r\n                    <FontAwesomeIcon icon={faPause} />\r\n                  )}\r\n                </PlayPauseButton>\r\n                {getVideoDuration() && (\r\n                  <div className=\"progress-time\">{`${currentTime} / ${getVideoDuration()}`}</div>\r\n                )}\r\n                <div\r\n                  onClick={seek}\r\n                  onMouseMove={moveToolTipPosition}\r\n                  onMouseLeave={() =>\r\n                    (toolTipRef.current.style = 'display: none;')\r\n                  }\r\n                  className=\"progress-bar\"\r\n                >\r\n                  <div className=\"progress-bar-visual\">\r\n                    <div\r\n                      ref={indicatorRef}\r\n                      className=\"progress-indicator\"\r\n                    ></div>\r\n                    <TimeToolTip ref={toolTipRef}>{indicatorTime}</TimeToolTip>\r\n                  </div>\r\n                </div>\r\n              </ControlsInnerWrap>\r\n            </Controls>\r\n          </Iframe>\r\n        </Wrapper>\r\n        <Queue />\r\n      </Flexbox>\r\n      <UserList />\r\n    </MainContainer>\r\n  );\r\n}\r\n\r\nconst MainContainer = styled.div``;\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  @media (min-width: 1200px) {\r\n    width: 80%;\r\n  }\r\n`;\r\nconst Flexbox = styled.div`\r\n  padding-bottom: 1rem;\r\n  @media (min-width: 1200px) {\r\n    display: flex;\r\n  }\r\n`;\r\nconst Controls = styled.div`\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  height: 40px;\r\n  width: 100%;\r\n  background: linear-gradient(0deg, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\r\n  opacity: 0;\r\n  transition-duration: 200ms;\r\n`;\r\n\r\nconst ControlsInnerWrap = styled.div`\r\n  width: 97%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  .progress-bar {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    width: 100%;\r\n    height: 16px;\r\n    margin-top: -16px;\r\n    cursor: pointer;\r\n\r\n    &:hover .progress-bar-visual {\r\n      height: 14px;\r\n      margin-top: -14px;\r\n    }\r\n\r\n    .progress-bar-visual {\r\n      position: absolute;\r\n      bottom: 0;\r\n      width: 100%;\r\n      height: 5px;\r\n      background: #b3a3a3bb;\r\n      transition-duration: 120ms;\r\n    }\r\n  }\r\n  .progress-indicator {\r\n    height: 100%;\r\n    top: 50%;\r\n    transform: translate(0%, -50%);\r\n    position: absolute;\r\n    background: rgb(255, 0, 0);\r\n    transition-duration: 200ms;\r\n    pointer-events: none;\r\n  }\r\n  .progress-time {\r\n    margin-left: 1rem;\r\n  }\r\n`;\r\n\r\nconst PlayPauseButton = styled.button`\r\n  width: 70px;\r\n  height: 100%;\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  outline: none;\r\n  svg {\r\n    color: white;\r\n    width: 1.25rem !important;\r\n    height: 1.25rem !important;\r\n  }\r\n`;\r\nconst Iframe = styled.div`\r\n  position: relative;\r\n  z-index: 9999;\r\n  padding-bottom: 56.25%; /* 16:9, for an aspect ratio of 1:1 change to this value to 100% */\r\n  box-shadow: 5px 5px 8px #0a0a0a;\r\n  iframe {\r\n    pointer-events: none;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n`;\r\nconst TimeToolTip = styled.div`\r\n  position: absolute;\r\n  top: -33px;\r\n  color: white;\r\n  pointer-events: none;\r\n  background: rgb(22, 21, 21);\r\n  border-radius: 6px;\r\n  padding: 4px;\r\n  transform: translateX(-50%);\r\n  display: none;\r\n  &::after {\r\n    content: '';\r\n    position: absolute;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    bottom: -5px;\r\n    width: 0;\r\n    height: 0;\r\n    border-left: 5px solid transparent;\r\n    border-right: 5px solid transparent;\r\n    border-top: 5px solid rgb(22, 21, 21);\r\n  }\r\n`;\r\n","C:\\Users\\Samuel\\Desktop\\exam\\exam\\src\\components\\UserList.jsx",["52"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { database } from '../firebase';\r\nimport { RoomContext } from './Room';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  padding: 0.75rem;\r\n  h2 {\r\n    margin: 0;\r\n  }\r\n`;\r\nconst List = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 1rem;\r\n  margin-top: 0.5rem;\r\n`;\r\n\r\nconst UserCard = styled.div`\r\n  display: grid;\r\n  place-items: center;\r\n  min-width: 40px;\r\n  height: 40px;\r\n  overflow: hidden;\r\n  word-break: break-all;\r\n  background: linear-gradient(45deg, #70aee9, #2082df);\r\n  color: white;\r\n  padding: 0 2rem;\r\n  border-radius: 200px;\r\n\r\n  animation: slideIn 300ms;\r\n\r\n  @keyframes slideIn {\r\n    0% {\r\n      opacity: 0;\r\n      transform: translateX(-10px);\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function UserList() {\r\n  const [userList, setUserList] = useState([]);\r\n  const { id, userId } = useContext(RoomContext);\r\n\r\n  const userLength = userList && Object.entries(userList).length;\r\n\r\n  function syncJoiningUser() {\r\n    // Checks if player object exists to determine active clients\r\n    if (window.player.getCurrentTime) {\r\n      // Pauses active clients until new has joined (pausing also syncs active clients)\r\n      window.player.pauseVideo();\r\n      database\r\n        .ref(`/rooms/${id}/`)\r\n        // Updates shared timestamp to prepare for new user\r\n        .update({ timestamp: window.player.getCurrentTime() - 1 });\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    let count = 0;\r\n    database.ref(`/rooms/${id}/users`).on('value', (snap) => {\r\n      const oldUserCount = userLength;\r\n      // Update userlist across clients\r\n      setUserList(snap.val());\r\n\r\n      if (oldUserCount < Object.entries(snap.val()).length) {\r\n        syncJoiningUser();\r\n      }\r\n\r\n      count = snap.numChildren();\r\n      if (snap.numChildren() > 1) {\r\n        // Remove user when it navigates away from the room\r\n        database.ref(`/rooms/${id}/users/${userId}`).onDisconnect().set({});\r\n      } else {\r\n        // If the user is the last person in the room delete the room instead\r\n        database.ref(`/rooms/${id}`).onDisconnect().set({});\r\n      }\r\n    });\r\n\r\n    // Cleanup if \"host\" changes, makes sure to reset so data is not stale\r\n    return () => {\r\n      // Remove the listener that deletes the room if there is more than 1 user connected\r\n      if (count > 1) {\r\n        database.ref(`/rooms/${id}`).onDisconnect().cancel();\r\n      }\r\n      database.ref(`/rooms/${id}/users`).off('value');\r\n    };\r\n  }, [id, userId, userLength]);\r\n\r\n  return (\r\n    <Container>\r\n      <h2>Connected users</h2>\r\n      <List>\r\n        {userList &&\r\n          Object.entries(userList).map((item) => {\r\n            const { name } = item[1];\r\n            return <UserCard key={item[0]}>{name}</UserCard>;\r\n          })}\r\n      </List>\r\n    </Container>\r\n  );\r\n}\r\n","C:\\Users\\Samuel\\Desktop\\exam\\exam\\src\\utils\\genericStyles.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":11,"column":10,"nodeType":"59","messageId":"60","endLine":11,"endColumn":18},{"ruleId":"61","severity":1,"message":"62","line":88,"column":6,"nodeType":"63","endLine":88,"endColumn":30,"suggestions":"64"},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'roomName' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'syncJoiningUser'. Either include it or remove the dependency array.","ArrayExpression",["67"],"no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},"Update the dependencies array to be: [id, syncJoiningUser, userId, userLength]",{"range":"70","text":"71"},[2522,2546],"[id, syncJoiningUser, userId, userLength]"]